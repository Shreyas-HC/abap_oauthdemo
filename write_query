*&---------------------------------------------------------------------*
*& Report ZRP_TRIGGER_UPSERT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zrp_trigger_upsert_btch_oauth1.

PARAMETERS: p_user   TYPE c LENGTH 100 OBLIGATORY LOWER CASE,
            p_fname  TYPE c LENGTH 100 OBLIGATORY LOWER CASE,
            p_lname  TYPE c LENGTH 100 OBLIGATORY LOWER CASE,
            p_uname  TYPE c LENGTH 100 OBLIGATORY LOWER CASE,
            p_userid TYPE c LENGTH 100 OBLIGATORY LOWER CASE.

DATA: lv_json      TYPE string,
      lv_sessionid TYPE string.

DATA: lv_body TYPE string.

START-OF-SELECTION.

  PERFORM start_new.

FORM start_new.

  DATA: lv_status         TYPE i,
        lv_error_occurred TYPE flag,
        lv_error_msg      TYPE string,
        lv_response_body  TYPE string,
        lv_url            TYPE String VALUE '', "Enter your EC Instance url here
        lv_json_user      TYPE string,
        lv_json_perperson TYPE string,
        lv_json_emp       TYPE string.

  DATA: lt_cookies TYPE tihttpcki,
        lt_fields  TYPE tihttpnvp,
        lv_user    TYPE string,
        lv_pwd     TYPE string.

  DATA: lv_body TYPE string,
        lo_oa2c_client  TYPE REF TO if_oauth2_client,
        lx_oa2c         TYPE REF TO cx_oa2c.

  PERFORM prepare_json USING 'User' CHANGING lv_json_user.
  PERFORM prepare_json USING 'PerPerson' CHANGING lv_json_perperson.
  PERFORM prepare_json USING 'EmpEmployment' CHANGING lv_json_emp.


  " Create client
  cl_http_client=>create_by_url(
    EXPORTING
      url                = lv_url
    IMPORTING
      client             = DATA(lo_client)
    EXCEPTIONS
      argument_not_found = 1
      plugin_not_active  = 2
      internal_error     = 3
      OTHERS             = 4 ).

* **********************************************************************
* * Set OAuth 2.0 Token
* **********************************************************************
TRY.

    CALL METHOD cl_oauth2_client=>create
      EXPORTING
        i_profile        = 'ZCLIENT'
        i_configuration  = 'ZCLIENT'
      RECEIVING
        ro_oauth2_client = lo_oa2c_client.

  CATCH cx_oa2c INTO lx_oa2c.
    WRITE: `Error calling CREATE.`.
    WRITE: / lx_oa2c->get_text( ).
    RETURN.
ENDTRY.

TRY.

    lo_oa2c_client->set_token(
      EXPORTING
        io_http_client =  lo_client                " HTTP Client Abstraction
    ).

  CATCH cx_oa2c INTO lx_oa2c.
    DATA(lv_text) = lx_oa2c->get_text( ).
    WRITE lv_text.
    TRY.
        "CALL METHOD lo_oa2c_client->execute_refresh_flow.
        "CALL METHOD lo_oa2c_client->execute_cc_flow.
      CALL METHOD lo_oa2c_client->execute_saml20_flow.

      CATCH cx_oa2c INTO lx_oa2c.
        lv_text = lx_oa2c->get_text( ).
        WRITE lv_text.
        RETURN.
    ENDTRY.
    TRY.

        lo_oa2c_client->set_token(
    EXPORTING
      io_http_client =  lo_client                " HTTP Client Abstraction
  ).
      CATCH cx_oa2c INTO lx_oa2c.
        lv_text = lx_oa2c->get_text( ).
        WRITE lv_text.
        RETURN.
    ENDTRY.
ENDTRY.


  " Prepare request
  lo_client->request->set_method( if_http_request=>co_request_method_post ).
  lo_client->request->set_header_field( name = 'Content-Type' value = 'multipart/mixed; boundary=batch_36522ad7-fc75-4b56-8c71-56071383e77b' ).

  PERFORM insert_line USING '--batch_36522ad7-fc75-4b56-8c71-56071383e77b'.
  PERFORM insert_line USING 'Content-Type: multipart/mixed; boundary=changeset_77162fcd-b8da-41ac-a9f8-9357efbbd621'.
  PERFORM insert_line USING ' '.
  lv_body = lv_body && cl_abap_char_utilities=>cr_lf.

  PERFORM insert_line USING '--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd621'.
  PERFORM insert_line USING 'Content-Transfer-Encoding: binary'.
  PERFORM insert_line USING 'Content-Type: application/http'.
  PERFORM insert_line USING ' '.
  lv_body = lv_body && cl_abap_char_utilities=>cr_lf.


  PERFORM insert_line USING 'POST upsert HTTP/1.1'.
  PERFORM insert_line USING 'Content-Type: application/json;type=entry'.
  PERFORM insert_line USING 'Accept: application/json'.
  PERFORM insert_line USING ' '.
  lv_body = lv_body && cl_abap_char_utilities=>cr_lf.


  PERFORM insert_line USING lv_json_user.
  PERFORM insert_line USING ' '.
*---------------------------------------------------------------------------------------------------------------

  PERFORM insert_line USING '--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd621'.
  PERFORM insert_line USING 'Content-Transfer-Encoding: binary'.
  PERFORM insert_line USING 'Content-Type: application/http'.
  PERFORM insert_line USING ' '.
  lv_body = lv_body && cl_abap_char_utilities=>cr_lf.


  PERFORM insert_line USING 'POST upsert HTTP/1.1'.
  PERFORM insert_line USING 'Accept: application/json'.
  PERFORM insert_line USING 'Content-Type: application/json;type=entry'.
  PERFORM insert_line USING ' '.
  lv_body = lv_body && cl_abap_char_utilities=>cr_lf.

  PERFORM insert_line USING lv_json_perperson.
  PERFORM insert_line USING ' '.
*---------------------------------------------------------------------------------------------------------------
  PERFORM insert_line USING '--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd621'.
  PERFORM insert_line USING 'Content-Transfer-Encoding: binary'.
  PERFORM insert_line USING 'Content-Type: application/http'.
  PERFORM insert_line USING ' '.
  lv_body = lv_body && cl_abap_char_utilities=>cr_lf.


  PERFORM insert_line USING 'POST upsert HTTP/1.1'.
  PERFORM insert_line USING 'Accept: application/json'.
  PERFORM insert_line USING 'Content-Type: application/json;type=entry'.

  PERFORM insert_line USING ' '.
  lv_body = lv_body && cl_abap_char_utilities=>cr_lf.

  PERFORM insert_line USING lv_json_emp.


  PERFORM insert_line USING '--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd621--'.
  PERFORM insert_line USING ' '.
  lv_body = lv_body && cl_abap_char_utilities=>cr_lf .

  PERFORM trigger_upsert USING lo_client '--batch_36522ad7-fc75-4b56-8c71-56071383e77b--'
        CHANGING lv_status lv_response_body
             lv_error_occurred
             lv_error_msg.

ENDFORM.

FORM prepare_json USING iv_entity TYPE string
                  CHANGING cv_json TYPE string      .

  TYPES:
    BEGIN OF ts_user_entity,
      firstName TYPE char40,
      lastName  TYPE char40,
      status    TYPE char40,
      username  TYPE char40,
      userid    TYPE char40,
    END OF ts_user_entity.

  TYPES:
    BEGIN OF ts_metadata,
      uri TYPE char100,
    END OF ts_metadata.

  TYPES:
    BEGIN OF ty_user,
      ____metadata TYPE ts_metadata,
      first_Name   TYPE char40,
      last_Name    TYPE char40,
      status       TYPE char40,
      username     TYPE char40,
      user_Id      TYPE char40,
    END OF ty_user.

  TYPES:
    BEGIN OF ty_PerPerson,
      ____metadata       TYPE ts_metadata,
      date_Of_Birth      TYPE char40,
      person_Id_External TYPE char40,
      user_id            TYPE char40,
    END OF ty_PerPerson.

  DATA: lv_json_body TYPE string,
        lv_string    TYPE string,
        lv_string1   TYPE string.

  TYPES:
    BEGIN OF ty_EmpEmployment,
      ____metadata       TYPE ts_metadata,
      start_Date         TYPE char40,
      person_Id_External TYPE char40,
      user_id            TYPE char40,
      service_Date       TYPE char40,
    END OF ty_EmpEmployment.

  CLEAR: lv_string.

  CASE   iv_entity.

    WHEN 'User'.


      DATA(lv_status) = 'ACTIVE'.
      CONCATENATE 'User(`' p_user '`)' INTO lv_string.
      REPLACE ALL OCCURRENCES OF '`' IN lv_string WITH `'`.
*======================ABAP Data==================================
      DATA(ls_user_data) = VALUE ty_user( ____metadata  = VALUE #( uri = lv_string )
                                                       first_Name  = p_fname
                                                       last_Name   = p_lname
                                                       status     = lv_status
                                                       username   =  p_uname
                                                       user_Id     =  p_userid ) .
*======================ABAP to JSON==================================
      lv_json_body = /ui2/cl_json=>serialize(
                             data        =  ls_user_data
                             pretty_name = /ui2/cl_json=>pretty_mode-camel_case ).



    WHEN 'PerPerson'.

      CONCATENATE 'PerPerson(`' p_userid '`)' INTO lv_string.
      REPLACE ALL OCCURRENCES OF '`' IN lv_string WITH `'`.
*======================ABAP Data==================================
      DATA(ls_person_data) = VALUE ty_PerPerson( ____metadata = VALUE #( uri = lv_string )
                                                       date_Of_Birth = '/Date(1495746637000)/'
                                                       person_Id_External = p_user
                                                       user_Id     =  p_userid ) .
*======================ABAP to JSON==================================
      lv_json_body = /ui2/cl_json=>serialize(
                             data        =  ls_person_data
                             pretty_name = /ui2/cl_json=>pretty_mode-camel_case ).



    WHEN 'EmpEmployment'.

      CONCATENATE 'EmpEmployment(personIdExternal=`' p_userid '`,' INTO lv_string.
      CONCATENATE 'userId=`' p_userid '`)' INTO lv_string1.
      CONCATENATE lv_string lv_string1 INTO lv_string.
      REPLACE ALL OCCURRENCES OF '`' IN lv_string WITH `'`.
*======================ABAP Data==================================
      DATA(ls_emp_data) = VALUE ty_EmpEmployment( ____metadata = VALUE #( uri = lv_string )
                                                       start_Date = '/Date(1495746637000)/'
                                                       person_Id_External = p_user
                                                       user_Id     =  p_userid
                                                       service_Date = '/Date(1495746637000)/' ) .
*======================ABAP to JSON==================================
      lv_json_body = /ui2/cl_json=>serialize(
                             data        =  ls_emp_data
                             pretty_name = /ui2/cl_json=>pretty_mode-camel_case ).

  ENDCASE.

  cv_json = lv_json_body.

ENDFORM.

FORM send_json USING
                     iv_url TYPE string
                     iv_dest TYPE rfcdest
                     iv_json_data TYPE string
        CHANGING cv_status TYPE i
                 cv_response_body TYPE string
                 cv_error_occurred TYPE flag
                 cv_error_msg TYPE string.


  DATA: lo_client TYPE REF TO if_http_client.

  DATA: lo_rest_client TYPE REF TO cl_rest_http_client,
        lo_response    TYPE REF TO if_rest_entity,
        lv_http_status TYPE i,
        lv_token       TYPE string.

  DATA: lt_cookies TYPE tihttpcki,
        lt_fields  TYPE tihttpnvp.

  CLEAR: cv_error_msg,
         cv_status,
         cv_error_occurred,
         cv_error_msg.

  IF iv_url IS INITIAL.
* No URL passed
    MESSAGE e349(sbds) INTO cv_error_msg.
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  CALL METHOD cl_http_client=>create_by_destination
    EXPORTING
      destination              = iv_dest
    IMPORTING
      client                   = lo_client
    EXCEPTIONS
      argument_not_found       = 1
      destination_not_found    = 2
      destination_no_authority = 3
      plugin_not_active        = 4
      internal_error           = 5
      OTHERS                   = 6.

  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
     INTO cv_error_msg.
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  "Get the Session ID
  IF lv_sessionid IS INITIAL.

    lo_client->propertytype_accept_cookie = if_http_client=>co_enabled.

    CALL METHOD lo_client->request->set_method( if_http_request=>co_request_method_get ).
    lo_client->request->set_header_field( name = 'x-csrf-token' value = 'Fetch' ).
    lo_client->request->set_header_field( name = 'Accept' value = 'application/json' ).
    lo_client->request->set_header_field( name = 'Content-Type' value = 'application/json' ).

    lo_client->send(
    EXPORTING timeout = 5
    EXCEPTIONS OTHERS = 4
  ).

    lo_client->receive(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3 ).


    lo_client->response->get_header_fields( CHANGING fields = lt_fields ).

    READ TABLE lt_fields ASSIGNING FIELD-SYMBOL(<field_token>) WITH KEY name = 'x-csrf-token'.
    lv_token = <field_token>-value.

    lo_client->response->get_cookies( CHANGING cookies = lt_cookies ).
    READ TABLE lt_cookies ASSIGNING FIELD-SYMBOL(<field_session>) WITH KEY name = 'JSESSIONID'.
    lv_sessionid = <field_session>-value.

  ENDIF.

  lo_client->request->set_cookie( name = 'JSESSIONID'
                                           value = lv_sessionid ).

  lo_client->request->set_cdata( iv_json_data ).
  lo_client->request->set_content_type( 'application/json' ).
  lo_client->request->set_method( 'POST' ).

  CALL METHOD lo_client->send
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      OTHERS                     = 4.
  IF sy-subrc NE 0.
    lo_client->get_last_error( IMPORTING message = cv_error_msg ).
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  lo_client->receive( EXCEPTIONS OTHERS = 1 ).
  IF sy-subrc NE 0.
    lo_client->get_last_error( IMPORTING message = cv_error_msg ).
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  cv_response_body = lo_client->response->get_cdata( ).
  lo_client->response->get_status( IMPORTING code = cv_status ).

  lo_client->close(
*    EXCEPTIONS
*      http_invalid_state = 1                " Invalid state
*      others             = 2
  ).
  IF sy-subrc <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.

FORM send_json_via_url USING
                     iv_url TYPE string
                     iv_dest TYPE rfcdest
                     iv_json_data TYPE string
        CHANGING cv_status TYPE i
                 cv_response_body TYPE string
                 cv_error_occurred TYPE flag
                 cv_error_msg TYPE string.

  DATA: lo_rest_client TYPE REF TO cl_rest_http_client,
        lo_response    TYPE REF TO if_rest_entity,
        lv_http_status TYPE i,
        lv_token       TYPE string.

  DATA: lt_cookies TYPE tihttpcki,
        lt_fields  TYPE tihttpnvp,
        lv_user    TYPE string,
        lv_pwd     TYPE string.

  CLEAR: cv_error_msg,
         cv_status,
         cv_error_occurred,
         cv_error_msg.

  IF iv_url IS INITIAL.
* No URL passed
    MESSAGE e349(sbds) INTO cv_error_msg.
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  " Create client
  cl_http_client=>create_by_url(
    EXPORTING
      url                = '' "Enter OData API url here
    IMPORTING
      client             = DATA(lo_client)
    EXCEPTIONS
      argument_not_found = 1
      plugin_not_active  = 2
      internal_error     = 3
      OTHERS             = 4 ).

   "Get the Session ID
  IF lv_sessionid IS INITIAL.

    lo_client->propertytype_accept_cookie = if_http_client=>co_enabled.

    CALL METHOD lo_client->request->set_method( if_http_request=>co_request_method_get ).
    lo_client->request->set_header_field( name = 'x-csrf-token' value = 'Fetch' ).
    lo_client->request->set_header_field( name = 'Accept' value = 'application/json' ).
    lo_client->request->set_header_field( name = 'Content-Type' value = 'application/json' ).

    lo_client->send(
    EXPORTING timeout = 5
    EXCEPTIONS OTHERS = 4
  ).

    lo_client->receive(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3 ).


    lo_client->response->get_header_fields( CHANGING fields = lt_fields ).

    READ TABLE lt_fields ASSIGNING FIELD-SYMBOL(<field_token>) WITH KEY name = 'x-csrf-token'.
    IF sy-subrc = 0.
      lv_token = <field_token>-value.
    ENDIF.

    lo_client->response->get_cookies( CHANGING cookies = lt_cookies ).
    READ TABLE lt_cookies ASSIGNING FIELD-SYMBOL(<field_session>) WITH KEY name = 'JSESSIONID'.
    IF sy-subrc = 0.
      lv_sessionid = <field_session>-value.
    ENDIF.

  ENDIF.

  IF lv_sessionid IS NOT INITIAL.

    lo_client->request->set_cookie( name = 'JSESSIONID'
                                             value = lv_sessionid ).
  ENDIF.


  lo_client->request->set_cdata( iv_json_data ).
  lo_client->request->set_content_type( 'application/json' ).
  lo_client->request->set_method( 'POST' ).

  CALL METHOD lo_client->send
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      OTHERS                     = 4.
  IF sy-subrc NE 0.
    lo_client->get_last_error( IMPORTING message = cv_error_msg ).
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  lo_client->receive( EXCEPTIONS OTHERS = 1 ).
  IF sy-subrc NE 0.
    lo_client->get_last_error( IMPORTING message = cv_error_msg ).
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  cv_response_body = lo_client->response->get_cdata( ).
  lo_client->response->get_status( IMPORTING code = cv_status ).

  lo_client->close(
*    EXCEPTIONS
*      http_invalid_state = 1                " Invalid state
*      others             = 2
  ).
  IF sy-subrc <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.

FORM insert_line USING lv_str_val TYPE string.
  lv_body = lv_body && lv_str_val.
  lv_body = lv_body && cl_abap_char_utilities=>newline.
ENDFORM.

FORM trigger_upsert
        USING lo_client TYPE REF TO if_http_client lv_string_val TYPE string
        CHANGING cv_status TYPE i
                 cv_response_body TYPE string
                 cv_error_occurred TYPE flag
                 cv_error_msg TYPE string .

  DATA lt_table TYPE TABLE OF w3html.

  lv_body = lv_body && lv_string_val.

  lo_client->request->set_cdata( lv_body ).

  " Send request
  lo_client->send(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      OTHERS                     = 4 ).
  IF sy-subrc NE 0.
    lo_client->get_last_error( IMPORTING message = cv_error_msg ).
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  " Catch result
  lo_client->receive(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      OTHERS                     = 4 ).
  IF sy-subrc NE 0.
    lo_client->get_last_error( IMPORTING message = cv_error_msg ).
    cv_error_occurred = 'X'.
    RETURN.
  ENDIF.

  " Catch data
  cv_response_body = lo_client->response->get_cdata( ).

  lo_client->response->get_status( IMPORTING code = cv_status ).

  " Close connection
  lo_client->close( ).


DATA(l_content_type) = lo_client->response->get_content_type( ).
  IF l_content_type CP `text/html*`.
    cl_demo_output=>display_html( html = cv_response_body ).
  ELSEIF l_content_type CP `text/xml*`.
    cl_demo_output=>display_xml( xml = cv_response_body ).
  ELSEIF l_content_type CP `application/json*`.
    cl_demo_output=>display_json( json = cv_response_body ).
  ELSE.
    cl_demo_output=>display_html( html = cv_response_body ).
  ENDIF.



ENDFORM.
