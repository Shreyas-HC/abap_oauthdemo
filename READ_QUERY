*&---------------------------------------------------------------------*
*& Report ZHC_TEST
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zrp_trigger_query_oauth1.

DATA: lo_http_client  TYPE REF TO if_http_client,
      gv_json         TYPE string,
      lo_rest_client  TYPE REF TO cl_rest_http_client,
      lv_profile      TYPE oa2c_profile,
      lv_target       TYPE rfcdisplay-rfchost,
      l_status_code   TYPE i,
      l_response_data TYPE string,
      lt_fields       TYPE tihttpnvp,
      lo_oa2c_client  TYPE REF TO if_oauth2_client,
      lx_oa2c         TYPE REF TO cx_oa2c.

CONSTANTS: lc_content    TYPE string VALUE 'Content-Type',
           lc_contentval TYPE string VALUE 'application/json'.

FIELD-SYMBOLS: <ls_field> LIKE LINE OF lt_fields.

* **********************************************************************
* * Instantiate HTTP Client
* **********************************************************************

CALL METHOD cl_http_client=>create_by_url
  EXPORTING
    url                = `` "Enter the EC Instance URL here
    ssl_id             = 'ANONYM'                " SSL Identity
  IMPORTING
    client             = lo_http_client          " HTTP Client Abstraction
  EXCEPTIONS
    argument_not_found = 1                " Communication parameter (host or service) not available
    plugin_not_active  = 2                " HTTP/HTTPS communication not available
    internal_error     = 3                " Internal error (e.g. name too long)
    pse_not_found      = 4                " PSE not found
    pse_not_distrib    = 5                " PSE not distributed
    pse_errors         = 6                " General PSE error
    OTHERS             = 7.
IF sy-subrc <> 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

lo_http_client->request->set_version( if_http_request=>co_protocol_version_1_0 ).

lo_http_client->propertytype_logon_popup = if_http_client=>co_disabled.

CALL METHOD lo_http_client->request->set_header_field
  EXPORTING
    name  = 'Content-Type'
    value = 'application/json'.

CALL METHOD lo_http_client->request->set_header_field
  EXPORTING
    name  = 'Accept'
    value = 'application/json'.

CALL METHOD lo_http_client->request->set_method
  EXPORTING
    method = 'GET'.

* **********************************************************************
* * Set OAuth 2.0 Token
* **********************************************************************
TRY.

    CALL METHOD cl_oauth2_client=>create
      EXPORTING
        i_profile        = 'ZCLIENT'   "Replace this
        i_configuration  = 'ZCLIENT'   "Replace this
      RECEIVING
        ro_oauth2_client = lo_oa2c_client.

  CATCH cx_oa2c INTO lx_oa2c.
    WRITE: `Error calling CREATE.`.
    WRITE: / lx_oa2c->get_text( ).
    RETURN.
ENDTRY.


TRY.

    lo_oa2c_client->set_token(
      EXPORTING
        io_http_client =  lo_http_client                " HTTP Client Abstraction
    ).

  CATCH cx_oa2c INTO lx_oa2c.
    DATA(lv_text) = lx_oa2c->get_text( ).
    WRITE lv_text.
    TRY.        
      CALL METHOD lo_oa2c_client->execute_saml20_flow.

      CATCH cx_oa2c INTO lx_oa2c.
        lv_text = lx_oa2c->get_text( ).
        WRITE lv_text.
        RETURN.
    ENDTRY.
    TRY.

        lo_oa2c_client->set_token(
    EXPORTING
      io_http_client =  lo_http_client                " HTTP Client Abstraction
  ).
      CATCH cx_oa2c INTO lx_oa2c.
        lv_text = lx_oa2c->get_text( ).
        WRITE lv_text.
        RETURN.
    ENDTRY.
ENDTRY.


* **********************************************************************
* * Send / Receive Request
* **********************************************************************

CALL METHOD lo_http_client->send
  EXCEPTIONS
    http_communication_failure = 1
    http_invalid_state         = 2
    http_processing_failed     = 3
    http_invalid_timeout       = 4
    OTHERS                     = 5.
IF sy-subrc <> 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

CALL METHOD lo_http_client->receive
  EXCEPTIONS
    http_communication_failure = 1
    http_invalid_state         = 2
    http_processing_failed     = 3
    OTHERS                     = 4.
IF sy-subrc <> 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

* **********************************************************************
* * Display result
* **********************************************************************
CALL METHOD lo_http_client->response->get_status
  IMPORTING
    code = l_status_code.
WRITE 'HTTP Status:'.
WRITE / l_status_code .

IF l_status_code = 200.
  CALL METHOD lo_http_client->response->get_cdata
    RECEIVING
      data = l_response_data.

  DATA(l_content_type) = lo_http_client->response->get_content_type( ).
  IF l_content_type CP `text/html*`.
    cl_demo_output=>display_html( html = l_response_data ).
  ELSEIF l_content_type CP `text/xml*`.
    cl_demo_output=>display_xml( xml = l_response_data ).
  ELSEIF l_content_type CP `application/json*`.
    cl_demo_output=>display_json( json = l_response_data ).
  ENDIF.
ELSE.
  CALL METHOD lo_http_client->response->get_header_fields
    CHANGING
      fields = lt_fields.

  LOOP AT lt_fields ASSIGNING <ls_field>.
    WRITE: / <ls_field>-name, 25 <ls_field>-value.
  ENDLOOP.

ENDIF.

* **********************************************************************
* * Close
* **********************************************************************
CALL METHOD lo_http_client->close
  EXCEPTIONS
    http_invalid_state = 1
    OTHERS             = 2.
IF sy-subrc <> 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.
